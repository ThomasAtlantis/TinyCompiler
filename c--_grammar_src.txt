grammar.add("A0") >> "A1 A2";
grammar.add("A2") >> "int main ( ) { A3 }";
grammar.add("A1") >> "A4 A1" | "null";
grammar.add("A4") >> "void A5 ( A6 ) { A3 }";
grammar.add("A6") >> "A7 A8";
grammar.add("A8") >> ", A7" | "null";
grammar.add("A7") >> "A9 A5";
grammar.add("A3") >> "B0 A3" | "null";
grammar.add("B0") >> "B1";
grammar.add("B1") >> "B2 ; B3";
grammar.add("B3") >> "B2 ; B3" | "null";
grammar.add("B2") >> "B4" | "B5" | "B6";
grammar.add("B4") >> "A9 A5 B7";
grammar.add("B7") >> "= B8" | "null";
grammar.add("B5") >> "B9 = B8";
grammar.add("B6") >> "return";
grammar.add("A9") >> "int" | "float" | "bool";
grammar.add("A5") >> "\I";
grammar.add("C0") >> "\C";
grammar.add("B9") >> "A5";
grammar.add("B8") >> "C1" | "C2";
grammar.add("C1") >> "C3 C4";
grammar.add("C4") >> "|| C3 C4" | "null";
grammar.add("C3") >> "C5 C6";
grammar.add("C6") >> "&& C5 C6" | "null";
grammar.add("C5") >> "C7";
grammar.add("C7") >> "C8" | "C2";
grammar.add("C8") >> "C9 D0";
grammar.add("D0") >> "> C9" | ">= C9" | "< C9" | "<= C9" | "== C9" | "!= C9" | "null";
grammar.add("C9") >> "D1";
grammar.add("D1") >> "D2" | "C2";
grammar.add("D2") >> "D3 D4";
grammar.add("D4") >> "+ D3 D4" | "- D3 D4" | "null";
grammar.add("D3") >> "D5 D6";
grammar.add("D6") >> "* D5 D6" | "/ D5 D6" | "null";
grammar.add("D5") >> "D7";
grammar.add("D7") >> "D8" | "C2";
grammar.add("D8") >> "D9 E0";
grammar.add("E0") >> "| D9 E0" | "null";
grammar.add("D9") >> "E1 E2";
grammar.add("E2") >> "& E1 E2" | "null";
grammar.add("E1") >> "C2";
grammar.add("C2") >> "E3" | "! E3" | "- E3" | "~ E3";
grammar.add("E3") >> "A5" | "C0" | "( B8 )";
