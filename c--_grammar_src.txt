grammar.add("A0") >> "A1 A2 A1 A3";
grammar.add("A1") >> "A4 ;" | "null";
grammar.add("A3") >> "void main ( ) { A5 }";
grammar.add("A2") >> "A6 A2" | "null";
grammar.add("A6") >> "void A7 ( A8 ) { A5 }";
grammar.add("A8") >> "A9 B0";
grammar.add("B0") >> ", A9" | "null";
grammar.add("A9") >> "B1 A7";
grammar.add("A5") >> "B2 A5" | "null";
grammar.add("B2") >> "B3" | "B4" | "B5";
grammar.add("B3") >> "B6 ; B7";
grammar.add("B7") >> "B6 ; B7" | "null";
grammar.add("B5") >> "if ( B8 ) { A5 } B9";
grammar.add("B9") >> "else if ( B8 ) { A5 } B9" | "else { A5 }" | "null";
grammar.add("B4") >> "while ( B8 ) { A5 C0 A5 }";
grammar.add("B4") >> "for ( B6 ; B8 ; B6 ) { A5 C0 A5 }";
grammar.add("C0") >> "continue ;" | "break ;";
grammar.add("B6") >> "A4" | "C1" | "return" | "C2";
grammar.add("C2") >> "put A7 ;" | "put C3 ;";
grammar.add("A4") >> "B1 A7 C4";
grammar.add("C4") >> "= B8" | "null";
grammar.add("C1") >> "C5 = B8";
grammar.add("C6") >> "return";
grammar.add("B1") >> "int" | "float" | "bool" | "char" | "string";
grammar.add("A7") >> "@I";
grammar.add("C3") >> "@C";
grammar.add("C5") >> "A7";
grammar.add("B8") >> "C7" | "C8";
grammar.add("C7") >> "C9 D0";
grammar.add("D0") >> "|| C9 D0" | "null";
grammar.add("C9") >> "D1 D2";
grammar.add("D2") >> "&& D1 D2" | "null";
grammar.add("D1") >> "D3";
grammar.add("D3") >> "D4" | "C8";
grammar.add("D4") >> "D5 D6";
grammar.add("D6") >> "> D5" | ">= D5" | "< D5" | "<= D5" | "== D5" | "!= D5" | "null";
grammar.add("D5") >> "D7";
grammar.add("D7") >> "D8" | "C8";
grammar.add("D8") >> "D9 E0";
grammar.add("E0") >> "+ D9 E0" | "- D9 E0" | "null";
grammar.add("D9") >> "E1 E2";
grammar.add("E2") >> "* E1 E2" | "/ E1 E2" | "null";
grammar.add("E1") >> "E3";
grammar.add("E3") >> "E4" | "C8";
grammar.add("E4") >> "E5 E6";
grammar.add("E6") >> "| E5 E6" | "null";
grammar.add("E5") >> "E7 E8";
grammar.add("E8") >> "& E7 E8" | "null";
grammar.add("E7") >> "C8";
grammar.add("C8") >> "E9" | "! E9" | "- E9" | "~ E9";
grammar.add("E9") >> "A7" | "C3" | "( B8 )";
