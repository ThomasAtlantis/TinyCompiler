
$程序 -> $其他函数定义 $主函数定义

$其他函数定义 -> $函数定义 $其他函数定义 | null
$函数定义 -> $标识符 qua_sav_func_name ( $形参列表 ) { qua_new_synbl $函数体 }
$形参列表 -> $形参 $其他形参 | null
$其他形参 -> , $形参 $其他形参 | null
$形参 -> $类型 $形参tmp1
$形参tmp1 -> $标识符 | & $标识符

$主函数定义 -> main qua_sav_func_name ( ) { qua_new_synbl $函数体 }
$函数体 -> $总结构 $函数体 | null | $循环跳转 $函数体
$总结构 -> $顺序结构 | $循环结构 | $分支结构1
$顺序结构 -> $语句 ;

$分支结构1 -> if ( $表达式 ) { $函数体 } $分支结构2
$分支结构2 -> else $分支结构3 | null
$分支结构3 -> { $函数体 } | $分支结构1

$循环结构 -> while ( $表达式 ) { $函数体 }
$循环结构 -> for ( $for_list_0 ; $for_list_1 ; $for_list_2 ) { $函数体 }
$for_list_0 -> $语句 | null
$for_list_1 -> $表达式 | null
$for_list_2 -> $语句 | null
$循环跳转 -> continue ; | break ;
$输出语句 -> putc $输出字符 | puts $字符串常量
$输出字符 -> $标识符 | $字符型常量
$赋值语句和函数调用 -> $赋值语句 | $函数调用
$赋值语句 -> $数组方括号 = $表达式
$函数调用 -> ( $实参列表 )
$实参列表 -> $实参 $其他实参 | null
$其他实参 -> , $实参 $其他实参 | null
$实参 -> $标识符 | $常量
$跳转语句 -> return
$类型 -> int qua_int | float qua_float | bool qua_bool | char qua_char

$表达式 -> $关系运算
	$关系运算 -> $tmp3_2 $tmp3_1
	$tmp3_1 -> > $tmp3_2 | >= $tmp3_2 | < $tmp3_2 | <= $tmp3_2 | == $tmp3_2 | != $tmp3_2 | null
	$tmp3_2 -> $tmp4
$tmp4 -> $算术运算
	$算术运算 -> $tmp5_2 $tmp5_1
	$tmp5_1 -> + $tmp5_2 qua+ $tmp5_1 | - $tmp5_2 qua- $tmp5_1 | null
	$tmp5_2 -> $tmp5_4 $tmp5_3
	$tmp5_3 -> * $tmp5_4 qua* $tmp5_3 | / $tmp5_4 qua/ $tmp5_3 | null
	$tmp5_4 -> $tmp8
$tmp8 -> $原子结合 | ! $原子结合 | - $原子结合 qua.
$原子结合 -> $标识符 quap $数组方括号 | $常量 quap | ( $表达式 )

$语句 -> $声明语句1 | $标识符 $赋值语句和函数调用 | return | $输出语句 | struct $标识符 $自定义结构声明或定义
$声明语句1 -> $类型 $声明语句tmp1
$声明语句tmp1 -> $标识符 qua_declare_id $声明语句tmp2 qua_declare $声明语句tmp3
$声明语句tmp2 -> [ $整型常量 qua_declare_arr ] | null
$声明语句tmp3 -> = $表达式 | null
$自定义结构声明或定义 -> $标识符 | { $声明语句2 ; $声明语句块 }
$声明语句2 -> $类型 $标识符 $数组方括号 | struct $标识符 $标识符
$声明语句块 -> $声明语句2 ; $声明语句块 | null
$标识符 -> @I
$数组索引 -> $整型变量 | $整型常量
$数组方括号 -> [ $数组索引 ] | null
$常量 -> $整型常量 | $实型常量 | $布尔常量
$整型常量 -> @INT
$实型常量 -> @FLT
$字符型常量 -> @CH
$字符串常量 -> @STR
$布尔常量 -> true | false
