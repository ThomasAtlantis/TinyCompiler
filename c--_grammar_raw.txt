
$程序 -> $其他函数定义 $主函数定义
$其他函数定义 -> $函数定义 $其他函数定义 | null
$函数定义 -> $标识符 qua_sav_func_name qua_new_synbl ( $形参列表 ) { $函数体 qua_return }
$形参列表 -> $形参 $其他形参 | null
$其他形参 -> , $形参 $其他形参 | null
$形参 -> $类型 $形参tmp1 qua_declare
$形参tmp1 -> $标识符 qua_declare_id $声明语句tmp2 | & $标识符 qua_declare_id

$主函数定义 -> main qua_sav_func_name ( ) { qua_new_synbl $函数体 qua_return }
$函数体 -> $总结构 $函数体 | null | $循环跳转 $函数体
$总结构 -> $顺序结构 | $循环结构 | $分支结构1
$顺序结构 -> $语句 ;

$分支结构1 -> if qua_gen_func_name qua_new_synbl ( $表达式 ) quaif { $函数体 qua_endif qua_return } $分支结构2
$分支结构2 -> else qua_gen_func_name $分支结构3 | null
$分支结构3 -> { qua_new_synbl $函数体 qua_endifall qua_return } | $分支结构1

$循环结构 -> while qua_gen_func_name qua_new_synbl quawh ( $表达式 ) { quawdo $函数体 quawe qua_return }
$循环结构 -> for qua_gen_func_name qua_new_synbl ( $for_list_0 ; quafor $for_list_1 quafdo ; $for_list_2 quafsav ) { $函数体 quafe qua_return }
$for_list_0 -> $语句 | null
$for_list_1 -> $表达式 | null
$for_list_2 -> $语句 | null
$循环跳转 -> continue qua_continue qua_check_jump ; | break qua_break qua_check_jump ;
$输入语句 -> getc $标识符 qua_getc qua_check_def_e quad
$输出语句 -> putc $输出字符 qua_putc qua_check_def_e quad | puts $字符串常量 qua_puts
$输出字符 -> $标识符 | $字符型常量
$赋值语句和函数调用 -> $赋值语句 | $函数调用
$赋值语句 -> $数组方括号 = $表达式 qua= | . $标识符 quap qua_member = $表达式 qua=
$函数调用 -> ( $实参列表 )
$实参列表 -> $实参 $其他实参 | null
$其他实参 -> , $实参 $其他实参 | null
$实参 -> $标识符 quap qua_check_def_e $数组方括号 | $常量
$跳转语句 -> return
$类型 -> int qua_int | float qua_float | bool qua_bool | char qua_char

$表达式 -> $关系运算
	$关系运算 -> $tmp3_2 $tmp3_1
	$tmp3_1 -> > $tmp3_2 qua> | >= $tmp3_2 qua>= | < $tmp3_2 qua< | <= $tmp3_2 qua<=
	$tmp3_1 -> == $tmp3_2 qua== | != $tmp3_2 qua!= | null
	$tmp3_2 -> $tmp4
$tmp4 -> $算术运算
	$算术运算 -> $tmp5_2 $tmp5_1
	$tmp5_1 -> + $tmp5_2 qua+ $tmp5_1 | - $tmp5_2 qua- $tmp5_1 | null
	$tmp5_2 -> $tmp5_4 $tmp5_3
	$tmp5_3 -> * $tmp5_4 qua* $tmp5_3 | / $tmp5_4 qua/ $tmp5_3 | null
	$tmp5_4 -> $tmp8
$tmp8 -> $原子结合 | ! $原子结合 | - $原子结合 qua.
$原子结合 -> $标识符 quap qua_check_def_e $原子结合tmp | $常量 quap | ( $表达式 )
$原子结合tmp -> $数组方括号 | . $标识符 quap qua_member
$语句 -> $声明语句1 | $标识符 quap qua_check_def_e $赋值语句和函数调用 | return | $输出语句 | $输入语句
$语句 -> struct qua_gen_func_name $标识符 qua_declare_struct_id $自定义结构声明或定义
$自定义结构声明或定义 -> $标识符 qua_struct_check_def qua_struct_declare
$自定义结构声明或定义 -> { qua_struct_def qua_new_synbl_struct $声明语句2 ; $声明语句块 qua_return }
$声明语句1 -> $类型 $声明语句tmp1
$声明语句tmp1 -> $标识符 qua_declare_id quap_id $声明语句tmp2_1
$声明语句tmp2_1 -> $声明语句tmp2 qua_declare | $声明语句tmp4 $声明语句tmp3
$声明语句tmp2 -> [ $整型常量 qua_declare_arr ] | null
$声明语句tmp3 -> = $表达式 qua=
$声明语句tmp4 -> null qua_declare
$声明语句2 -> $类型 $标识符 qua_declare_id $声明语句tmp2 qua_instruct_declare
$声明语句块 -> $声明语句2 ; $声明语句块 | null
$标识符 -> @I
$数组索引 -> $标识符 quap qua_check_def_e | $整型常量 quap
$数组方括号 -> [ $数组索引 ] qua[] | null
$常量 -> $整型常量 | $实型常量 | $布尔常量 | $字符型常量 | $字符串常量
$整型常量 -> @INT
$实型常量 -> @FLT
$字符型常量 -> @CH
$字符串常量 -> @STR
$布尔常量 -> true | false
